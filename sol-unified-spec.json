{
  "project": {
    "name": "Sol Unified",
    "description": "Native macOS app combining notes, clipboard manager, and AI-powered screenshot organizer with global hotkey access",
    "version": "1.0.0",
    "target_platform": "macOS 13.0+",
    "project_path": "/Users/savarsareen/coding/mable/sol-unified",
    "language": "Swift 5.9+",
    "frameworks": ["SwiftUI", "AppKit", "Carbon", "SQLite3"],
    "design_philosophy": "Brutalist - minimal, functional, high-contrast, clean typography"
  },

  "architecture": {
    "pattern": "MVVM with local state management",
    "data_layer": "SQLite database with direct SQL queries",
    "hotkey_system": "Carbon API (legacy but reliable)",
    "window_management": "Custom NSWindow subclass with borderless styling",
    "ai_integration": "Option A: Embedded Python backend (migrate to Swift later)"
  },

  "directory_structure": {
    "root": "sol-unified/",
    "source": "SolUnified/",
    "subdirectories": [
      "App/",
      "Core/",
      "Features/Notes/",
      "Features/Clipboard/",
      "Features/Screenshots/",
      "Shared/",
      "Resources/"
    ]
  },

  "database_schemas": {
    "notes": {
      "table_name": "notes",
      "columns": [
        {"name": "id", "type": "INTEGER", "constraints": "PRIMARY KEY AUTOINCREMENT"},
        {"name": "title", "type": "TEXT", "constraints": ""},
        {"name": "content", "type": "TEXT", "constraints": "NOT NULL"},
        {"name": "is_global", "type": "INTEGER", "constraints": "DEFAULT 0"},
        {"name": "created_at", "type": "TEXT", "constraints": "NOT NULL"},
        {"name": "updated_at", "type": "TEXT", "constraints": "NOT NULL"}
      ],
      "indexes": ["CREATE INDEX idx_notes_updated ON notes(updated_at DESC)"]
    },
    "clipboard_history": {
      "table_name": "clipboard_history",
      "columns": [
        {"name": "id", "type": "INTEGER", "constraints": "PRIMARY KEY AUTOINCREMENT"},
        {"name": "content_type", "type": "TEXT", "constraints": "NOT NULL"},
        {"name": "content_text", "type": "TEXT", "constraints": ""},
        {"name": "content_preview", "type": "TEXT", "constraints": ""},
        {"name": "file_path", "type": "TEXT", "constraints": ""},
        {"name": "content_hash", "type": "TEXT", "constraints": "UNIQUE"},
        {"name": "created_at", "type": "TEXT", "constraints": "NOT NULL"}
      ],
      "indexes": ["CREATE INDEX idx_clipboard_created ON clipboard_history(created_at DESC)"],
      "max_items": 100
    },
    "screenshots": {
      "table_name": "screenshots",
      "columns": [
        {"name": "id", "type": "INTEGER", "constraints": "PRIMARY KEY AUTOINCREMENT"},
        {"name": "filename", "type": "TEXT", "constraints": "UNIQUE NOT NULL"},
        {"name": "filepath", "type": "TEXT", "constraints": "NOT NULL"},
        {"name": "file_hash", "type": "TEXT", "constraints": "UNIQUE NOT NULL"},
        {"name": "file_size", "type": "INTEGER", "constraints": ""},
        {"name": "created_at", "type": "TEXT", "constraints": ""},
        {"name": "modified_at", "type": "TEXT", "constraints": ""},
        {"name": "width", "type": "INTEGER", "constraints": ""},
        {"name": "height", "type": "INTEGER", "constraints": ""},
        {"name": "ai_description", "type": "TEXT", "constraints": ""},
        {"name": "ai_tags", "type": "TEXT", "constraints": ""},
        {"name": "ai_text_content", "type": "TEXT", "constraints": ""},
        {"name": "analyzed_at", "type": "TEXT", "constraints": ""},
        {"name": "analysis_model", "type": "TEXT", "constraints": ""}
      ],
      "indexes": [
        "CREATE INDEX idx_screenshots_filename ON screenshots(filename)",
        "CREATE INDEX idx_screenshots_created ON screenshots(created_at DESC)"
      ]
    }
  },

  "files": [
    {
      "path": "SolUnified/App/SolUnifiedApp.swift",
      "purpose": "Main app entry point",
      "responsibilities": [
        "Initialize app lifecycle",
        "Set up window manager",
        "Register hotkeys on launch",
        "Handle app activation/deactivation"
      ],
      "key_code_elements": {
        "app_delegate": "NSApplicationDelegateAdaptor",
        "window_style": ".hiddenTitleBar",
        "initialization": "Database.shared.initialize()"
      }
    },
    {
      "path": "SolUnified/App/AppDelegate.swift",
      "purpose": "App delegate for window and system event management",
      "responsibilities": [
        "Create and manage borderless window",
        "Handle global hotkey registration",
        "Manage app hide/show state",
        "Handle app termination"
      ],
      "key_code_elements": {
        "window_creation": "BorderlessWindow with specific frame",
        "hotkey_registration": "HotkeyManager.shared.register()",
        "animations": "slide in 210ms, slide out 150ms"
      }
    },
    {
      "path": "SolUnified/Core/WindowManager.swift",
      "purpose": "Custom NSWindow subclass for borderless window with keyboard support",
      "responsibilities": [
        "Override canBecomeKey to return true",
        "Override canBecomeMain to return true",
        "Handle window positioning and sizing",
        "Implement slide animations"
      ],
      "reference_code": {
        "class_definition": "class BorderlessWindow: NSWindow",
        "key_overrides": [
          "override var canBecomeKey: Bool { return true }",
          "override var canBecomeMain: Bool { return true }"
        ],
        "style_mask": "[.borderless, .fullSizeContentView]",
        "level": ".floating (always on top)"
      },
      "animation_specs": {
        "slide_in_duration": 0.21,
        "slide_in_timing": "CAMediaTimingFunction(name: .easeOut)",
        "slide_out_duration": 0.15,
        "slide_out_timing": "CAMediaTimingFunction(name: .easeIn)"
      }
    },
    {
      "path": "SolUnified/Core/HotkeyManager.swift",
      "purpose": "Global hotkey registration using Carbon APIs",
      "responsibilities": [
        "Register hotkey with Carbon RegisterEventHotKey",
        "Handle hotkey events",
        "Toggle window visibility on activation",
        "Clean up on app termination"
      ],
      "reference_code": {
        "api": "RegisterEventHotKey from Carbon framework",
        "default_hotkey": "Option + Backtick (kVK_ANSI_Grave)",
        "event_target": "GetApplicationEventTarget()",
        "callback": "EventHandlerUPP for hotkey events"
      },
      "imports": ["Carbon"]
    },
    {
      "path": "SolUnified/Core/Database.swift",
      "purpose": "SQLite database wrapper and manager",
      "responsibilities": [
        "Initialize database on first launch",
        "Create all tables with schemas",
        "Provide query execution methods",
        "Handle database migrations",
        "Thread-safe access"
      ],
      "key_methods": [
        "initialize() -> Void",
        "execute(_ sql: String, parameters: [Any]) -> Bool",
        "query(_ sql: String, parameters: [Any]) -> [[String: Any]]",
        "createTables() -> Void"
      ],
      "database_location": "~/Library/Application Support/SolUnified/sol.db"
    },
    {
      "path": "SolUnified/Shared/TabNavigator.swift",
      "purpose": "Main tab navigation controller",
      "responsibilities": [
        "Manage three main tabs (Notes, Clipboard, Screenshots)",
        "Handle tab switching via UI and keyboard shortcuts",
        "Maintain selected tab state"
      ],
      "tabs": [
        {"id": "notes", "title": "NOTES", "shortcut": "Cmd+1", "view": "NotesView()"},
        {"id": "clipboard", "title": "CLIPBOARD", "shortcut": "Cmd+2", "view": "ClipboardView()"},
        {"id": "screenshots", "title": "SCREENSHOTS", "shortcut": "Cmd+3", "view": "ScreenshotsView()"}
      ],
      "ui_structure": "HStack with buttons at top, selected view below"
    },
    {
      "path": "SolUnified/Shared/BrutalistStyles.swift",
      "purpose": "Design system and reusable style components",
      "responsibilities": [
        "Define color palette",
        "Create custom button styles",
        "Define typography",
        "Provide spacing constants"
      ],
      "design_tokens": {
        "colors": {
          "background_primary": "#f9f9f9",
          "background_secondary": "#ffffff",
          "background_tertiary": "#f5f5f5",
          "text_primary": "#2c3e50",
          "text_secondary": "#5a6c7d",
          "text_muted": "#95a5a6",
          "border": "#e0e6ed",
          "accent": "#5d9cec",
          "accent_hover": "#4a89dc"
        },
        "typography": {
          "font_family": "SF Pro (system default)",
          "heading_size": 20,
          "body_size": 14,
          "small_size": 12
        },
        "spacing": {
          "xs": 4,
          "sm": 8,
          "md": 16,
          "lg": 24,
          "xl": 32
        },
        "border_radius": {
          "sm": 6,
          "md": 12,
          "lg": 16
        }
      },
      "button_styles": [
        "BrutalistButtonStyle (default)",
        "BrutalistPrimaryButtonStyle (accent color)",
        "BrutalistSecondaryButtonStyle (muted)"
      ]
    },
    {
      "path": "SolUnified/Shared/Models.swift",
      "purpose": "Data models for all features",
      "models": [
        {
          "name": "Note",
          "properties": [
            "id: Int",
            "title: String",
            "content: String",
            "isGlobal: Bool",
            "createdAt: Date",
            "updatedAt: Date"
          ]
        },
        {
          "name": "ClipboardItem",
          "properties": [
            "id: Int",
            "contentType: ContentType (enum: text, image, file)",
            "contentText: String?",
            "contentPreview: String?",
            "filePath: String?",
            "contentHash: String",
            "createdAt: Date"
          ]
        },
        {
          "name": "Screenshot",
          "properties": [
            "id: Int",
            "filename: String",
            "filepath: String",
            "fileHash: String",
            "fileSize: Int",
            "createdAt: Date",
            "modifiedAt: Date",
            "width: Int",
            "height: Int",
            "aiDescription: String?",
            "aiTags: String?",
            "aiTextContent: String?",
            "analyzedAt: Date?",
            "analysisModel: String?"
          ]
        }
      ]
    },
    {
      "path": "SolUnified/Features/Notes/NotesView.swift",
      "purpose": "Main notes feature UI",
      "responsibilities": [
        "Toggle between scratchpad and list view",
        "Display current mode",
        "Handle view switching"
      ],
      "ui_structure": {
        "header": "Toggle button (Scratchpad / List)",
        "content": "Conditional view based on mode",
        "default_mode": "scratchpad"
      }
    },
    {
      "path": "SolUnified/Features/Notes/ScratchpadView.swift",
      "purpose": "Global scratchpad - single always-available note",
      "responsibilities": [
        "Large text editor area",
        "Auto-save on text change (debounced)",
        "Load global note on appear",
        "Focus text field automatically"
      ],
      "ui_components": [
        "TextEditor with transparent background",
        "Character count display (optional)",
        "Last saved timestamp"
      ],
      "auto_save_delay": "1 second after last keystroke"
    },
    {
      "path": "SolUnified/Features/Notes/NotesListView.swift",
      "purpose": "List of all saved notes",
      "responsibilities": [
        "Display notes in reverse chronological order",
        "Search functionality",
        "Create new note button",
        "Delete note swipe action",
        "Tap to edit note"
      ],
      "ui_components": [
        "Search bar at top",
        "List of note cards (title, preview, date)",
        "New note button",
        "Empty state if no notes"
      ]
    },
    {
      "path": "SolUnified/Features/Notes/NotesStore.swift",
      "purpose": "Notes data management and business logic",
      "responsibilities": [
        "CRUD operations for notes",
        "Load global note",
        "Save/update notes to database",
        "Delete notes",
        "Search notes by title/content"
      ],
      "key_methods": [
        "loadGlobalNote() -> Note?",
        "saveNote(_ note: Note) -> Bool",
        "loadAllNotes() -> [Note]",
        "searchNotes(query: String) -> [Note]",
        "deleteNote(id: Int) -> Bool"
      ]
    },
    {
      "path": "SolUnified/Features/Clipboard/ClipboardView.swift",
      "purpose": "Clipboard history display",
      "responsibilities": [
        "Show list of clipboard items",
        "Search clipboard history",
        "Click item to copy back to clipboard",
        "Show preview for different content types",
        "Clear all button"
      ],
      "ui_components": [
        "Search bar",
        "List of clipboard items with icons",
        "Content preview (text truncated, image thumbnail)",
        "Copy indicator on click",
        "Empty state"
      ]
    },
    {
      "path": "SolUnified/Features/Clipboard/ClipboardMonitor.swift",
      "purpose": "Monitor NSPasteboard for changes",
      "responsibilities": [
        "Poll pasteboard every 0.5 seconds",
        "Detect changes via changeCount",
        "Extract content (text, image, file URL)",
        "Save to database via ClipboardStore",
        "Deduplicate using content hash"
      ],
      "implementation_details": {
        "polling_interval": 0.5,
        "pasteboard": "NSPasteboard.general",
        "supported_types": ["NSPasteboard.PasteboardType.string", "NSPasteboard.PasteboardType.png", "NSPasteboard.PasteboardType.fileURL"],
        "hash_algorithm": "MD5 or SHA256"
      }
    },
    {
      "path": "SolUnified/Features/Clipboard/ClipboardStore.swift",
      "purpose": "Clipboard data management",
      "responsibilities": [
        "Save clipboard items to database",
        "Enforce max item limit (100)",
        "Load clipboard history",
        "Search clipboard history",
        "Copy item back to pasteboard",
        "Clear history"
      ],
      "key_methods": [
        "saveItem(_ item: ClipboardItem) -> Bool",
        "loadHistory(limit: Int) -> [ClipboardItem]",
        "searchHistory(query: String) -> [ClipboardItem]",
        "copyToPasteboard(_ item: ClipboardItem) -> Bool",
        "clearHistory() -> Bool",
        "pruneOldItems() -> Void (keep only last 100)"
      ]
    },
    {
      "path": "SolUnified/Features/Screenshots/ScreenshotsView.swift",
      "purpose": "Screenshot grid and search UI",
      "responsibilities": [
        "Display screenshots in grid layout",
        "Search by description/tags/text",
        "Scan folder button",
        "Show stats",
        "Click for detail modal"
      ],
      "ui_components": [
        "Header with scan and stats buttons",
        "Search bar",
        "Grid of thumbnails (LazyVGrid)",
        "Screenshot card (image, description preview, tags)",
        "Detail modal sheet",
        "Loading indicator during scan"
      ],
      "grid_specs": {
        "columns": "adaptive minimum 200pt",
        "spacing": 16,
        "thumbnail_size": "200x150"
      }
    },
    {
      "path": "SolUnified/Features/Screenshots/ScreenshotAnalyzer.swift",
      "purpose": "AI analysis integration",
      "responsibilities": [
        "Option A: Communicate with Python backend",
        "Trigger scan endpoint",
        "Fetch analysis results",
        "Handle errors gracefully"
      ],
      "python_backend": {
        "source_path": "/Users/savarsareen/Library/Mobile Documents/com~apple~CloudDocs/Obsidian Vault/brutalist-apps-ecosystem/screenshot-organizer/backend/",
        "launch_command": "python3 main.py",
        "port": 5001,
        "endpoints": {
          "scan": "POST /api/scan",
          "screenshots": "GET /api/screenshots?search=&limit=100&offset=0",
          "screenshot_detail": "GET /api/screenshot/<id>",
          "image": "GET /api/image/<id>",
          "stats": "GET /api/stats"
        }
      },
      "key_methods": [
        "startBackend() -> Bool",
        "stopBackend() -> Void",
        "scanScreenshots() async -> ScanResult",
        "fetchScreenshots(search: String, limit: Int, offset: Int) async -> [Screenshot]",
        "fetchStats() async -> ScreenshotStats"
      ]
    },
    {
      "path": "SolUnified/Features/Screenshots/FileWatcher.swift",
      "purpose": "Monitor screenshots folder for new files",
      "responsibilities": [
        "Watch screenshots directory using FSEvents",
        "Detect new files",
        "Trigger auto-scan when new screenshots appear",
        "Debounce rapid changes"
      ],
      "implementation_details": {
        "api": "FSEventStreamCreate",
        "watch_path": "~/Pictures/Pics/Screenshots (configurable)",
        "debounce_delay": "5 seconds",
        "event_types": ["created", "modified"]
      }
    },
    {
      "path": "SolUnified/Features/Screenshots/ScreenshotsStore.swift",
      "purpose": "Screenshot data management",
      "responsibilities": [
        "Query screenshots from database",
        "Filter by search query",
        "Paginate results",
        "Get screenshot details",
        "Update screenshot metadata"
      ],
      "key_methods": [
        "loadScreenshots(search: String?, limit: Int, offset: Int) -> [Screenshot]",
        "getScreenshot(id: Int) -> Screenshot?",
        "getStats() -> ScreenshotStats",
        "updateScreenshot(_ screenshot: Screenshot) -> Bool"
      ]
    }
  ],

  "implementation_phases": [
    {
      "phase": 1,
      "name": "Foundation",
      "duration_estimate": "4-6 hours",
      "tasks": [
        {
          "id": "1.1",
          "description": "Create new Xcode project",
          "details": "macOS App, SwiftUI lifecycle, minimum deployment macOS 13.0",
          "output": "SolUnified.xcodeproj"
        },
        {
          "id": "1.2",
          "description": "Implement WindowManager",
          "details": "Custom NSWindow subclass with borderless styling, canBecomeKey/canBecomeMain overrides",
          "output": "Core/WindowManager.swift"
        },
        {
          "id": "1.3",
          "description": "Implement HotkeyManager",
          "details": "Carbon API integration, RegisterEventHotKey, Option+Backtick default",
          "output": "Core/HotkeyManager.swift"
        },
        {
          "id": "1.4",
          "description": "Set up Database",
          "details": "SQLite3 wrapper, create tables, CRUD methods",
          "output": "Core/Database.swift"
        },
        {
          "id": "1.5",
          "description": "Create TabNavigator",
          "details": "Three-tab structure with keyboard shortcuts",
          "output": "Shared/TabNavigator.swift"
        },
        {
          "id": "1.6",
          "description": "Define Models and Styles",
          "details": "Data models and brutalist design system",
          "output": "Shared/Models.swift, Shared/BrutalistStyles.swift"
        }
      ]
    },
    {
      "phase": 2,
      "name": "Notes Feature",
      "duration_estimate": "3-4 hours",
      "tasks": [
        {
          "id": "2.1",
          "description": "Build NotesStore",
          "details": "Database CRUD for notes",
          "output": "Features/Notes/NotesStore.swift"
        },
        {
          "id": "2.2",
          "description": "Build ScratchpadView",
          "details": "Single text area with auto-save",
          "output": "Features/Notes/ScratchpadView.swift"
        },
        {
          "id": "2.3",
          "description": "Build NotesListView",
          "details": "List of notes with search and CRUD",
          "output": "Features/Notes/NotesListView.swift"
        },
        {
          "id": "2.4",
          "description": "Build NotesView",
          "details": "Container with mode toggle",
          "output": "Features/Notes/NotesView.swift"
        }
      ]
    },
    {
      "phase": 3,
      "name": "Clipboard Feature",
      "duration_estimate": "3-4 hours",
      "tasks": [
        {
          "id": "3.1",
          "description": "Build ClipboardMonitor",
          "details": "NSPasteboard polling, change detection",
          "output": "Features/Clipboard/ClipboardMonitor.swift"
        },
        {
          "id": "3.2",
          "description": "Build ClipboardStore",
          "details": "Database CRUD for clipboard items",
          "output": "Features/Clipboard/ClipboardStore.swift"
        },
        {
          "id": "3.3",
          "description": "Build ClipboardView",
          "details": "List of clipboard history with search",
          "output": "Features/Clipboard/ClipboardView.swift"
        }
      ]
    },
    {
      "phase": 4,
      "name": "Screenshots Feature",
      "duration_estimate": "5-6 hours",
      "tasks": [
        {
          "id": "4.1",
          "description": "Bundle Python backend",
          "details": "Copy backend/, configure paths, test subprocess launch",
          "output": "Resources/PythonBackend/"
        },
        {
          "id": "4.2",
          "description": "Build ScreenshotAnalyzer",
          "details": "HTTP client for Python backend API",
          "output": "Features/Screenshots/ScreenshotAnalyzer.swift"
        },
        {
          "id": "4.3",
          "description": "Build ScreenshotsStore",
          "details": "Database queries for screenshots",
          "output": "Features/Screenshots/ScreenshotsStore.swift"
        },
        {
          "id": "4.4",
          "description": "Build ScreenshotsView",
          "details": "Grid UI with search, scan button, detail modal",
          "output": "Features/Screenshots/ScreenshotsView.swift"
        },
        {
          "id": "4.5",
          "description": "Build FileWatcher",
          "details": "FSEvents monitoring for auto-scan",
          "output": "Features/Screenshots/FileWatcher.swift"
        }
      ]
    },
    {
      "phase": 5,
      "name": "Polish & Testing",
      "duration_estimate": "2-3 hours",
      "tasks": [
        {
          "id": "5.1",
          "description": "Apply consistent styling",
          "details": "Ensure brutalist design throughout all views"
        },
        {
          "id": "5.2",
          "description": "Add keyboard shortcuts",
          "details": "Cmd+1/2/3 for tabs, Cmd+N for new note, etc."
        },
        {
          "id": "5.3",
          "description": "Add preferences",
          "details": "Settings for hotkey, screenshot path, theme"
        },
        {
          "id": "5.4",
          "description": "Test end-to-end",
          "details": "All features work, no crashes, performance acceptable"
        },
        {
          "id": "5.5",
          "description": "Write README",
          "details": "Installation, usage, screenshots"
        }
      ]
    }
  ],

  "critical_code_references": {
    "borderless_window": {
      "description": "From blog post - key to making window accept input",
      "code": "class BorderlessWindow: NSWindow {\n    override var canBecomeKey: Bool { return true }\n    override var canBecomeMain: Bool { return true }\n}"
    },
    "carbon_hotkey": {
      "description": "From blog post - reliable global hotkey registration",
      "code": "RegisterEventHotKey(UInt32(kVK_ANSI_Grave), UInt32(optionKey), hotKeyID, GetApplicationEventTarget(), 0, &hotKeyRef)"
    },
    "slide_animations": {
      "description": "From blog post - animation timing",
      "slide_in": "NSAnimationContext.runAnimationGroup { context in\n    context.duration = 0.21\n    context.timingFunction = CAMediaTimingFunction(name: .easeOut)\n    window.animator().frame = targetFrame\n}",
      "slide_out": "NSAnimationContext.runAnimationGroup { context in\n    context.duration = 0.15\n    context.timingFunction = CAMediaTimingFunction(name: .easeIn)\n    window.animator().frame = hiddenFrame\n}"
    }
  },

  "testing_checklist": [
    "Global hotkey shows/hides window",
    "Window accepts keyboard input",
    "Animations smooth and timed correctly",
    "Scratchpad auto-saves",
    "Notes list CRUD works",
    "Clipboard monitor detects changes",
    "Clipboard history stores correctly",
    "Screenshots scan and analyze",
    "Screenshot search works",
    "Tab navigation with keyboard shortcuts",
    "App launches on login (optional)",
    "Database persists across restarts",
    "No memory leaks",
    "No crashes under normal use"
  ],

  "success_metrics": {
    "launch_time": "<0.2s from hotkey to visible",
    "lines_of_code": "<2000 total",
    "memory_usage": "<50MB idle",
    "app_size": "<10MB compiled",
    "animation_smoothness": "60fps consistently"
  }
}

